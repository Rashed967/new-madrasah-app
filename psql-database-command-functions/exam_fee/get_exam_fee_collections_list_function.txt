
CREATE OR REPLACE FUNCTION public.get_exam_fee_collections_list(
    p_page INTEGER DEFAULT 1,
    p_limit INTEGER DEFAULT 10,
    p_search_term TEXT DEFAULT NULL,
    p_exam_id_filter UUID DEFAULT NULL,
    p_madrasa_id_filter UUID DEFAULT NULL
)
RETURNS JSONB -- Returns { items: ExamFeeCollection[], totalItems: number }
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    _offset INTEGER;
    _items_jsonb JSONB;
    _total_items INTEGER;
    _base_query TEXT;
    _data_query TEXT;
    _count_query TEXT;
    _search_condition TEXT := '';
    _filter_condition TEXT := '';
BEGIN
    _offset := (p_page - 1) * p_limit;

    IF p_search_term IS NOT NULL AND p_search_term <> '' THEN
        _search_condition := format(' AND (efc.id::text ILIKE %1$L OR e.name ILIKE %1$L OR m.name_bn ILIKE %1$L OR m.madrasa_code::text ILIKE %1$L)', '%' || p_search_term || '%');
    END IF;

    IF p_exam_id_filter IS NOT NULL THEN
        _filter_condition := _filter_condition || format(' AND efc.exam_id = %L', p_exam_id_filter);
    END IF;
    IF p_madrasa_id_filter IS NOT NULL THEN
        _filter_condition := _filter_condition || format(' AND efc.madrasa_id = %L', p_madrasa_id_filter);
    END IF;

    _base_query := '
        FROM public.exam_fee_collections efc
        JOIN public.exams e ON efc.exam_id = e.id
        JOIN public.madrasas m ON efc.madrasa_id = m.id
        WHERE TRUE' || _search_condition || _filter_condition;

    _count_query := 'SELECT COUNT(efc.id)' || _base_query;
    EXECUTE _count_query INTO _total_items;
    
    _data_query := '
        SELECT
            efc.id,
            efc.exam_id,
            e.name AS exam_name, -- For display
            efc.madrasa_id,
            m.name_bn AS madrasa_name_bn, -- For display
            m.madrasa_code AS madrasa_code, -- For display
            efc.collection_date,
            efc.apply_late_fee,
            efc.total_calculated_fee,
            efc.total_paid_amount,
            efc.balance_amount,
            efc.created_at,
            (
                SELECT COALESCE(jsonb_agg(jsonb_build_object(
                    ''examineeId'', eefd.examinee_id,
                    ''examineeNameBn'', ex.name_bn, 
                    ''examineeRegNo'', ex.registration_number,
                    ''paidFee'', eefd.paid_fee_for_examinee,
                    ''studentType'', eefd.student_type_at_collection,
                    ''marhalaId'', eefd.marhala_id_at_collection,
                    ''marhalaNameBn'', mar.name_bn 
                ) ORDER BY ex.registration_number), ''[]''::jsonb)
                FROM public.examinee_exam_fee_details eefd
                JOIN public.examinees ex ON eefd.examinee_id = ex.id
                JOIN public.marhalas mar ON eefd.marhala_id_at_collection = mar.id
                WHERE eefd.exam_fee_collection_id = efc.id
            ) AS examinee_fee_details,
            (
                SELECT COALESCE(jsonb_agg(jsonb_build_object(
                    ''id'', efp.id,
                    ''method'', efp.method,
                    ''amount'', efp.amount,
                    ''paymentDate'', efp.payment_date,
                    ''transactionId'', efp.transaction_id,
                    ''bankName'', efp.bank_name,
                    ''branchName'', efp.branch_name,
                    ''accountNumber'', efp.account_number,
                    ''checkNumber'', efp.check_number,
                    ''mobileBankingProvider'', efp.mobile_banking_provider,
                    ''senderNumber'', efp.sender_number,
                    ''receiverNumber'', efp.receiver_number,
                    ''notes'', efp.notes
                ) ORDER BY efp.created_at), ''[]''::jsonb)
                FROM public.exam_fee_payments efp
                WHERE efp.exam_fee_collection_id = efc.id
            ) AS payments
        ' || _base_query || '
        ORDER BY efc.collection_date DESC, efc.created_at DESC
        LIMIT ' || p_limit || ' OFFSET ' || _offset;
    
    EXECUTE 'SELECT COALESCE(jsonb_agg(q), ''[]''::jsonb) FROM (' || _data_query || ') q' INTO _items_jsonb;
    
    RETURN jsonb_build_object('items', _items_jsonb, 'totalItems', _total_items);
END;
$$;

GRANT EXECUTE ON FUNCTION public.get_exam_fee_collections_list(INTEGER, INTEGER, TEXT, UUID, UUID) TO authenticated;

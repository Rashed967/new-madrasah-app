
CREATE OR REPLACE FUNCTION public.create_exam_fee_collection(
    p_exam_id UUID,
    p_madrasa_id UUID,
    p_apply_late_fee BOOLEAN,
    p_collection_date TIMESTAMPTZ,
    p_examinee_fee_details_json JSONB[], -- Expects: [{examineeId, paidFee, studentType, marhalaId}]
    p_payments_json JSONB[] -- Expects: [{method, amount, paymentDate, transactionId, ...}]
)
RETURNS JSONB -- Returns {collection_id, total_calculated_fee, total_paid_amount, balance_amount}
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_collection_id UUID;
    v_total_calculated_fee NUMERIC := 0;
    v_total_paid_amount NUMERIC := 0;
    v_balance_amount NUMERIC;
    v_examinee_detail_item JSONB;
    v_payment_item JSONB;
    v_user_id UUID := auth.uid();
    v_user_role TEXT;

    _ex_detail_examinee_id UUID;
    _ex_detail_paid_fee NUMERIC;
    _ex_detail_student_type TEXT;
    _ex_detail_marhala_id UUID;

    _pay_method TEXT;
    _pay_amount NUMERIC;
    _pay_payment_date DATE;
    _pay_transaction_id TEXT;
    _pay_bank_name TEXT;
    _pay_branch_name TEXT;
    _pay_account_number TEXT;
    _pay_check_number TEXT;
    _pay_mobile_banking_provider TEXT;
    _pay_sender_number TEXT;
    _pay_receiver_number TEXT;
    _pay_notes TEXT;

    -- Additional variables for creating the transaction
    v_transaction_category_id UUID;
    v_madrasa_name TEXT;
    v_exam_name TEXT;
    v_transaction_description TEXT;
BEGIN
    -- Role Check
    SELECT role INTO v_user_role FROM public.user_profiles WHERE id = v_user_id;
    IF NOT (v_user_role = 'admin' OR v_user_role = 'super_admin') THEN
        RAISE EXCEPTION 'পরীক্ষার ফি সংগ্রহের অনুমতি আপনার নেই।' USING ERRCODE = '42501';
    END IF;

    -- Validations
    IF p_exam_id IS NULL OR p_madrasa_id IS NULL OR p_collection_date IS NULL THEN
        RAISE EXCEPTION 'পরীক্ষা, মাদরাসা এবং সংগ্রহের তারিখ আবশ্যক।';
    END IF;
    IF p_examinee_fee_details_json IS NULL OR array_length(p_examinee_fee_details_json, 1) IS NULL OR array_length(p_examinee_fee_details_json, 1) = 0 THEN
        RAISE EXCEPTION 'অন্তত একজন পরীক্ষার্থীর ফি বিবরণ আবশ্যক।';
    END IF;

    -- Calculate total_calculated_fee
    FOREACH v_examinee_detail_item IN ARRAY p_examinee_fee_details_json
    LOOP
        -- Accessing camelCase key 'paidFee' from client JSON
        _ex_detail_paid_fee := COALESCE((v_examinee_detail_item->>'paidFee')::NUMERIC, 0); 
        IF _ex_detail_paid_fee < 0 THEN RAISE EXCEPTION 'পরিশোধিত ফি ঋণাত্মক হতে পারবে না।'; END IF;
        v_total_calculated_fee := v_total_calculated_fee + _ex_detail_paid_fee;
    END LOOP;

    -- Calculate total_paid_amount
    IF p_payments_json IS NOT NULL THEN
        FOREACH v_payment_item IN ARRAY p_payments_json
        LOOP
             -- Accessing camelCase key 'amount'
            _pay_amount := COALESCE((v_payment_item->>'amount')::NUMERIC, 0);
            IF _pay_amount <= 0 AND v_total_calculated_fee > 0 THEN -- Allow 0 amount if total_calculated_fee is also 0
                 RAISE EXCEPTION 'পেমেন্টের পরিমাণ অবশ্যই ধনাত্মক হতে হবে যদি মোট প্রদেয় ফি শূন্য না হয়।'; 
            END IF;
            v_total_paid_amount := v_total_paid_amount + _pay_amount;
        END LOOP;
    END IF;
    
    IF v_total_paid_amount = 0 AND v_total_calculated_fee > 0 THEN
        RAISE EXCEPTION 'মোট প্রদেয় ফি শূন্য না হলে অবশ্যই কিছু অর্থ জমা করতে হবে।';
    END IF;
    -- Removed check that disallowed overpayment to match frontend flexibility. Balance can be negative.


    v_balance_amount := v_total_calculated_fee - v_total_paid_amount;

    -- Insert into exam_fee_collections
    INSERT INTO public.exam_fee_collections (
        exam_id, madrasa_id, collection_date, apply_late_fee,
        total_calculated_fee, total_paid_amount, balance_amount,
        created_by, updated_by
    ) VALUES (
        p_exam_id, p_madrasa_id, p_collection_date, COALESCE(p_apply_late_fee, FALSE),
        v_total_calculated_fee, v_total_paid_amount, v_balance_amount,
        v_user_id, v_user_id
    ) RETURNING id INTO v_collection_id;

    -- Insert into examinee_exam_fee_details and update examinee status
    FOREACH v_examinee_detail_item IN ARRAY p_examinee_fee_details_json
    LOOP
        _ex_detail_examinee_id := (v_examinee_detail_item->>'examineeId')::UUID; -- camelCase
        _ex_detail_paid_fee := COALESCE((v_examinee_detail_item->>'paidFee')::NUMERIC, 0); -- camelCase & COALESCE
        _ex_detail_student_type := v_examinee_detail_item->>'studentType'; -- camelCase
        _ex_detail_marhala_id := (v_examinee_detail_item->>'marhalaId')::UUID; -- camelCase

        INSERT INTO public.examinee_exam_fee_details (
            exam_fee_collection_id, examinee_id, paid_fee_for_examinee,
            student_type_at_collection, marhala_id_at_collection
        ) VALUES (
            v_collection_id, _ex_detail_examinee_id, _ex_detail_paid_fee,
            _ex_detail_student_type, _ex_detail_marhala_id
        );

        -- Update examinee status
        UPDATE public.examinees
        SET status = 'fee_paid', updated_at = NOW()
        WHERE id = _ex_detail_examinee_id
          AND status = 'fee_pending'; 
    END LOOP;

    -- Insert into exam_fee_payments
    IF p_payments_json IS NOT NULL THEN
        FOREACH v_payment_item IN ARRAY p_payments_json
        LOOP
            _pay_method := v_payment_item->>'method';
            _pay_amount := COALESCE((v_payment_item->>'amount')::NUMERIC, 0);
            _pay_payment_date := (v_payment_item->>'paymentDate')::DATE; -- camelCase 'paymentDate'
            _pay_transaction_id := v_payment_item->>'transactionId'; -- camelCase
            _pay_bank_name := v_payment_item->>'bankName'; -- camelCase
            _pay_branch_name := v_payment_item->>'branchName'; -- camelCase
            _pay_account_number := v_payment_item->>'accountNumber'; -- camelCase
            _pay_check_number := v_payment_item->>'checkNumber'; -- camelCase
            _pay_mobile_banking_provider := v_payment_item->>'mobileBankingProvider'; -- camelCase
            _pay_sender_number := v_payment_item->>'senderNumber'; -- camelCase
            _pay_receiver_number := v_payment_item->>'receiverNumber'; -- camelCase
            _pay_notes := v_payment_item->>'notes'; -- camelCase

            IF _pay_method IS NULL OR _pay_method = '' THEN RAISE EXCEPTION 'পেমেন্ট পদ্ধতি আবশ্যক।'; END IF;
            IF _pay_payment_date IS NULL THEN RAISE EXCEPTION 'পেমেন্টের তারিখ আবশ্যক।'; END IF;
            IF _pay_method = 'check' AND (_pay_check_number IS NULL OR TRIM(_pay_check_number) = '') THEN RAISE EXCEPTION 'চেক নম্বর আবশ্যক।'; END IF;
            IF (_pay_method = 'mobile_banking' OR _pay_method = 'bank_transfer') AND (_pay_transaction_id IS NULL OR TRIM(_pay_transaction_id) = '') THEN RAISE EXCEPTION 'ট্রানজেকশন আইডি আবশ্যক।'; END IF;

            INSERT INTO public.exam_fee_payments (
                exam_fee_collection_id, method, amount, payment_date,
                transaction_id, bank_name, branch_name, account_number, check_number,
                mobile_banking_provider, sender_number, receiver_number, notes
            ) VALUES (
                v_collection_id, _pay_method, _pay_amount, _pay_payment_date,
                _pay_transaction_id, _pay_bank_name, _pay_branch_name, _pay_account_number, _pay_check_number,
                _pay_mobile_banking_provider, _pay_sender_number, _pay_receiver_number, _pay_notes
            );
        END LOOP;
    END IF;

    -- Create a corresponding transaction for the income
    BEGIN
        -- Get the category ID for 'পরীক্ষার ফি'
        SELECT id INTO v_transaction_category_id
        FROM public.transaction_categories
        WHERE name = 'পরীক্ষার ফি' AND type = 'income'
        LIMIT 1;

        -- Get madrasa and exam names for the description
        SELECT name_bn INTO v_madrasa_name FROM public.madrasas WHERE id = p_madrasa_id;
        SELECT name INTO v_exam_name FROM public.exams WHERE id = p_exam_id;

        -- Create the description
        v_transaction_description := 'পরীক্ষার ফি বাবদ আয়: ' || v_exam_name || ' (' || v_madrasa_name || ')';

        -- Create the transaction if a category is found and payment was made
        IF v_transaction_category_id IS NOT NULL AND v_total_paid_amount > 0 THEN
            INSERT INTO public.transactions (
                transaction_date,
                category_id,
                amount,
                type,
                party_name,
                description,
                created_by
            )
            VALUES (
                p_collection_date,
                v_transaction_category_id,
                v_total_paid_amount,
                'income',
                v_madrasa_name,
                v_transaction_description,
                v_user_id
            );
        END IF;
    EXCEPTION
        WHEN others THEN
            RAISE WARNING 'Could not create transaction for exam fee collection %: % ', v_collection_id, SQLERRM;
            -- Do not re-raise, as the main fee collection was successful
    END;

    RETURN jsonb_build_object(
        'collection_id', v_collection_id,
        'total_calculated_fee', v_total_calculated_fee,
        'total_paid_amount', v_total_paid_amount,
        'balance_amount', v_balance_amount
    );
EXCEPTION
    WHEN others THEN
        RAISE WARNING 'Error in create_exam_fee_collection: SQLSTATE: %, SQLERRM: %', SQLSTATE, SQLERRM;
        RAISE;
END;
$$;

GRANT EXECUTE ON FUNCTION public.create_exam_fee_collection(UUID, UUID, BOOLEAN, TIMESTAMPTZ, JSONB[], JSONB[]) TO authenticated;
    
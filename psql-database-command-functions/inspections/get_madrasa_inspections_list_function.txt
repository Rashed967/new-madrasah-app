CREATE OR REPLACE FUNCTION public.get_madrasa_inspections_list(
    p_page INTEGER DEFAULT 1,
    p_limit INTEGER DEFAULT 10,
    p_search_term TEXT DEFAULT NULL,
    p_exam_id UUID DEFAULT NULL,
    p_start_date DATE DEFAULT NULL,
    p_end_date DATE DEFAULT NULL
)
RETURNS JSONB
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
AS $$
DECLARE
    _offset INTEGER;
    _items_jsonb JSONB;
    _total_items INTEGER;
    _base_query TEXT;
    _data_query TEXT;
    _count_query TEXT;
    _where_clauses TEXT[] := ARRAY['TRUE'];
BEGIN
    _offset := (p_page - 1) * p_limit;

    IF p_search_term IS NOT NULL AND TRIM(p_search_term) <> '' THEN
        _where_clauses := array_append(_where_clauses, format(
            '(i.inspector_name ILIKE %1$L OR m.name_bn ILIKE %1$L OR m.madrasa_code::text ILIKE %1$L OR e.name ILIKE %1$L)',
            '%' || TRIM(p_search_term) || '%'
        ));
    END IF;

    IF p_exam_id IS NOT NULL THEN
        _where_clauses := array_append(_where_clauses, format('i.exam_id = %L', p_exam_id));
    END IF;

    IF p_start_date IS NOT NULL THEN
        _where_clauses := array_append(_where_clauses, format('i.inspection_date >= %L', p_start_date));
    END IF;

    IF p_end_date IS NOT NULL THEN
        _where_clauses := array_append(_where_clauses, format('i.inspection_date <= %L', p_end_date));
    END IF;

    _base_query := '
        FROM public.madrasa_inspections i
        JOIN public.madrasas m ON i.madrasa_id = m.id
        LEFT JOIN public.exams e ON i.exam_id = e.id
        WHERE ' || array_to_string(_where_clauses, ' AND ');

    _count_query := 'SELECT COUNT(i.id)' || _base_query;
    EXECUTE _count_query INTO _total_items;

    _data_query := '
        SELECT
            i.id,
            i.madrasa_id,
            m.name_bn as madrasa_name_bn,
            m.madrasa_code,
            e.name as exam_name,
            i.inspection_date,
            i.inspector_name,
            i.total_fee,
            i.created_at
        ' || _base_query || '
        ORDER BY i.inspection_date DESC, i.created_at DESC
        LIMIT ' || p_limit || ' OFFSET ' || _offset;

    EXECUTE 'SELECT COALESCE(jsonb_agg(row_to_json(q)), ''[]''::jsonb) FROM (' || _data_query || ') q' INTO _items_jsonb;
    
    RETURN jsonb_build_object('items', _items_jsonb, 'totalItems', _total_items);
END;
$$;
GRANT EXECUTE ON FUNCTION public.get_madrasa_inspections_list(INTEGER, INTEGER, TEXT, UUID, DATE, DATE) TO authenticated;
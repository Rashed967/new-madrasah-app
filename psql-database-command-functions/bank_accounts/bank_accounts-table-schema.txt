
-- Ensure the handle_updated_at function exists (create if not)
-- CREATE OR REPLACE FUNCTION public.handle_updated_at() ... (if not already created)

CREATE TABLE IF NOT EXISTS public.bank_accounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    bank_name TEXT NOT NULL,
    branch_name TEXT NOT NULL,
    account_name TEXT NOT NULL,
    account_number TEXT NOT NULL UNIQUE,
    account_type TEXT NOT NULL CHECK (account_type IN ('current', 'savings')),
    opening_date DATE NOT NULL,
    opening_balance NUMERIC(15, 2) NOT NULL CHECK (opening_balance >= 0),
    current_balance NUMERIC(15, 2) NOT NULL CHECK (current_balance >= 0),
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

COMMENT ON TABLE public.bank_accounts IS 'Stores details of all bank accounts held by the board.';

-- Indexes
CREATE INDEX IF NOT EXISTS idx_bank_accounts_bank_name ON public.bank_accounts(bank_name);
CREATE INDEX IF NOT EXISTS idx_bank_accounts_is_active ON public.bank_accounts(is_active);

-- Trigger for updated_at
DROP TRIGGER IF EXISTS on_bank_accounts_updated ON public.bank_accounts;
CREATE TRIGGER on_bank_accounts_updated
BEFORE UPDATE ON public.bank_accounts
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- RLS Policies
ALTER TABLE public.bank_accounts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow admin full access for bank_accounts"
  ON public.bank_accounts
  FOR ALL TO authenticated
  USING ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'))
  WITH CHECK ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'));

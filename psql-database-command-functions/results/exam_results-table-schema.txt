-- Stores the final processed result for each examinee for a given exam.

CREATE TABLE IF NOT EXISTS public.exam_results (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    exam_id UUID NOT NULL REFERENCES public.exams(id) ON DELETE CASCADE,
    examinee_id UUID NOT NULL REFERENCES public.examinees(id) ON DELETE CASCADE,
    total_marks INTEGER NOT NULL,
    percentage NUMERIC(5, 2) NOT NULL CHECK (percentage >= 0 AND percentage <= 100),
    grade TEXT,
    status TEXT NOT NULL CHECK (status IN ('কৃতকার্য', 'অকৃতকার্য')), -- Updated status constraint
    
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

    CONSTRAINT unique_exam_examinee_result UNIQUE (exam_id, examinee_id)
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_exam_results_exam_id ON public.exam_results(exam_id);
CREATE INDEX IF NOT EXISTS idx_exam_results_examinee_id ON public.exam_results(examinee_id);
CREATE INDEX IF NOT EXISTS idx_exam_results_status ON public.exam_results(status);

-- Trigger for updated_at
DROP TRIGGER IF EXISTS on_exam_results_updated ON public.exam_results;
CREATE TRIGGER on_exam_results_updated
BEFORE UPDATE ON public.exam_results
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- RLS Policies
ALTER TABLE public.exam_results ENABLE ROW LEVEL SECURITY;

-- Admins have full access
CREATE POLICY "Allow admin full access for exam_results"
  ON public.exam_results
  FOR ALL TO authenticated
  USING ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'))
  WITH CHECK ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'));

-- Allow authenticated users (e.g., teachers, examinees) to read results
CREATE POLICY "Allow authenticated read access for exam_results"
  ON public.exam_results
  FOR SELECT TO authenticated
  USING (true);

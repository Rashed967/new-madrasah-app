CREATE OR REPLACE FUNCTION public.get_contact_submissions_list(
    p_page INTEGER DEFAULT 1,
    p_limit INTEGER DEFAULT 10,
    p_status_filter TEXT DEFAULT NULL,
    p_search_term TEXT DEFAULT NULL
)
RETURNS JSONB
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
AS $$
DECLARE
    _offset INTEGER;
    _items_jsonb JSONB;
    _total_items INTEGER;
    _where_clauses TEXT[] := ARRAY['TRUE'];
BEGIN
    _offset := (p_page - 1) * p_limit;

    IF p_status_filter IS NOT NULL AND p_status_filter <> '' THEN
        _where_clauses := array_append(_where_clauses, format('status = %L', p_status_filter));
    END IF;

    IF p_search_term IS NOT NULL AND TRIM(p_search_term) <> '' THEN
        _where_clauses := array_append(_where_clauses, format(
            '(name ILIKE %1$L OR email ILIKE %1$L OR subject ILIKE %1$L)',
            '%' || TRIM(p_search_term) || '%'
        ));
    END IF;

    -- Count query
    EXECUTE 'SELECT COUNT(*) FROM public.contact_submissions WHERE ' || array_to_string(_where_clauses, ' AND ')
    INTO _total_items;

    -- Data query
    EXECUTE '
        SELECT COALESCE(jsonb_agg(row_to_json(q)), ''[]''::jsonb) 
        FROM (
            SELECT id, name, email, subject, message, status, created_at
            FROM public.contact_submissions
            WHERE ' || array_to_string(_where_clauses, ' AND ') || '
            ORDER BY created_at DESC
            LIMIT ' || p_limit || ' OFFSET ' || _offset || '
        ) q'
    INTO _items_jsonb;

    RETURN jsonb_build_object('items', _items_jsonb, 'totalItems', _total_items);
END;
$$;
GRANT EXECUTE ON FUNCTION public.get_contact_submissions_list(INTEGER, INTEGER, TEXT, TEXT) TO authenticated;

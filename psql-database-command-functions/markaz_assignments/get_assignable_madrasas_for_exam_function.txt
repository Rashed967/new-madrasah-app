
CREATE OR REPLACE FUNCTION public.get_assignable_madrasas_for_exam(
    p_exam_id UUID,
    p_page INTEGER DEFAULT 1,
    p_limit INTEGER DEFAULT 10,
    p_zone_id UUID DEFAULT NULL -- New optional parameter for zone filtering
)
RETURNS TABLE (
    madrasa_id UUID,
    madrasa_name_bn TEXT,
    madrasa_code INTEGER,
    madrasa_type TEXT, 
    assignable_marhalas JSONB 
)
LANGUAGE plpgsql
STABLE 
SECURITY DEFINER
AS $$
DECLARE
    _offset INTEGER;
BEGIN
    _offset := (p_page - 1) * p_limit;

    RETURN QUERY
    WITH exam_assigned_marhalas AS (
        SELECT DISTINCT mma.madrasa_id, mma.marhala_id
        FROM public.markaz_madrasa_marhala_assignments mma
        WHERE mma.exam_id = p_exam_id
    ),
    all_eligible_madrasa_ids AS (
        SELECT DISTINCT m.id
        FROM public.madrasas m
        WHERE 
            (p_zone_id IS NULL OR m.zone_id = p_zone_id) -- Filter by zone if p_zone_id is provided
            AND EXISTS (
                SELECT 1
                FROM public.marhalas mar_check
                LEFT JOIN exam_assigned_marhalas eam_check
                    ON m.id = eam_check.madrasa_id AND mar_check.id = eam_check.marhala_id
                WHERE eam_check.marhala_id IS NULL 
                  AND (m.type = 'both' OR m.type = mar_check.type) 
            )
    ),
    paginated_madrasa_ids AS (
        SELECT 
            eligible_ids.id
        FROM all_eligible_madrasa_ids eligible_ids
        JOIN public.madrasas mad_order ON eligible_ids.id = mad_order.id
        ORDER BY mad_order.name_bn 
        LIMIT p_limit
        OFFSET _offset
    )
    SELECT
        mad.id AS madrasa_id,
        mad.name_bn AS madrasa_name_bn,
        mad.madrasa_code,
        mad.type AS madrasa_type,
        COALESCE(
            (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'marhala_id', mar.id,
                        'marhala_name_bn', mar.name_bn,
                        'marhala_type', mar.type,
                        'marhala_category', mar.category
                    ) ORDER BY mar.marhala_order 
                )
                FROM public.marhalas mar
                LEFT JOIN exam_assigned_marhalas eam_inner
                    ON mad.id = eam_inner.madrasa_id AND mar.id = eam_inner.marhala_id
                WHERE eam_inner.marhala_id IS NULL 
                  AND (mad.type = 'both' OR mad.type = mar.type) 
            ),
            '[]'::jsonb 
        ) AS assignable_marhalas
    FROM public.madrasas mad
    WHERE mad.id IN (SELECT p_ids.id FROM paginated_madrasa_ids p_ids) 
    ORDER BY mad.name_bn; 
END;
$$;

GRANT EXECUTE ON FUNCTION public.get_assignable_madrasas_for_exam(UUID, INTEGER, INTEGER, UUID) TO authenticated;

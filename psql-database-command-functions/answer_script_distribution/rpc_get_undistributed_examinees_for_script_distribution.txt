
CREATE OR REPLACE FUNCTION public.get_undistributed_examinees_for_script_distribution(
    p_exam_id UUID,
    p_markaz_id UUID,
    p_kitab_id UUID
)
RETURNS TABLE (
    examinee_id UUID,
    registration_number INTEGER,
    roll_number INTEGER,
    examinee_name_bn TEXT,
    madrasa_name_bn TEXT,
    madrasa_id UUID -- To allow further filtering if needed by Madrasa within Markaz
)
LANGUAGE sql STABLE SECURITY DEFINER AS $$
    SELECT
        ex.id AS examinee_id,
        ex.registration_number,
        ex.roll_number,
        ex.name_bn AS examinee_name_bn,
        mad.name_bn AS madrasa_name_bn,
        ex.madrasa_id
    FROM public.examinees ex
    JOIN public.madrasas mad ON ex.madrasa_id = mad.id
    -- Ensure the examinee's madrasa-marhala is assigned to this markaz for this exam
    JOIN public.markaz_madrasa_marhala_assignments mma 
        ON ex.madrasa_id = mma.madrasa_id 
        AND ex.marhala_id = mma.marhala_id 
        AND ex.exam_id = mma.exam_id
    -- Ensure the examinee's marhala has the selected kitab
    JOIN public.marhalas mar ON ex.marhala_id = mar.id AND p_kitab_id = ANY(mar.kitab_ids)
    WHERE ex.exam_id = p_exam_id
      AND mma.markaz_id = p_markaz_id 
      AND ex.roll_number IS NOT NULL -- Ensure roll has been assigned
      AND NOT EXISTS ( -- Not already distributed for this exam-kitab
          SELECT 1
          FROM public.distributed_script_details dsd
          WHERE dsd.examinee_id = ex.id
            AND dsd.exam_id = p_exam_id -- Check against the specific exam_id
            AND dsd.kitab_id = p_kitab_id -- Check against the specific kitab_id
      )
    ORDER BY ex.roll_number ASC NULLS LAST, ex.registration_number ASC;
$$;

GRANT EXECUTE ON FUNCTION public.get_undistributed_examinees_for_script_distribution(UUID, UUID, UUID) TO authenticated;

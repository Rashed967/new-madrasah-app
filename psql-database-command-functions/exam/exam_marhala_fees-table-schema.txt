
-- Ensure the handle_updated_at function exists (create if not)
-- CREATE OR REPLACE FUNCTION public.handle_updated_at()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     NEW.updated_at = NOW();
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TABLE IF NOT EXISTS public.exam_marhala_fees (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    exam_id UUID NOT NULL REFERENCES public.exams(id) ON DELETE CASCADE,
    marhala_id UUID NOT NULL REFERENCES public.marhalas(id) ON DELETE RESTRICT,
    starting_roll_number INTEGER NOT NULL CHECK (starting_roll_number > 0),
    regular_fee INTEGER NOT NULL CHECK (regular_fee >= 0),
    irregular_fee INTEGER NOT NULL CHECK (irregular_fee >= 0),
    late_regular_fee INTEGER NOT NULL CHECK (late_regular_fee >= 0),
    late_irregular_fee INTEGER NOT NULL CHECK (late_irregular_fee >= 0),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT unique_exam_marhala_fee UNIQUE (exam_id, marhala_id) -- Ensure one fee structure per marhala per exam
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_exam_marhala_fees_exam_id ON public.exam_marhala_fees(exam_id);
CREATE INDEX IF NOT EXISTS idx_exam_marhala_fees_marhala_id ON public.exam_marhala_fees(marhala_id);

-- Trigger for updated_at
DROP TRIGGER IF EXISTS on_exam_marhala_fees_updated ON public.exam_marhala_fees;
CREATE TRIGGER on_exam_marhala_fees_updated
BEFORE UPDATE ON public.exam_marhala_fees
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- RLS Policies (Example - adjust to your security model)
-- ALTER TABLE public.exam_marhala_fees ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Allow all access for admins for exam_marhala_fees"
-- ON public.exam_marhala_fees
-- FOR ALL TO authenticated
-- USING ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'))
-- WITH CHECK ((SELECT role FROM public.user_profiles WHERE id = auth.uid()) IN ('admin', 'super_admin'));


CREATE OR REPLACE FUNCTION public.get_markazes_for_filter_dropdown(
    p_search_term TEXT DEFAULT NULL,
    p_limit INTEGER DEFAULT 10,
    p_page INTEGER DEFAULT 1
)
RETURNS JSONB -- { items: [{value, label, code}], total_items: INTEGER }
LANGUAGE plpgsql STABLE SECURITY DEFINER AS $$
DECLARE
    _offset INTEGER;
    _items JSONB;
    _total_items INTEGER;
    _query TEXT;
    _count_query TEXT;
    _where_clauses TEXT[] := ARRAY['mk.is_active = TRUE'];
BEGIN
    _offset := (p_page - 1) * p_limit;

    IF p_search_term IS NOT NULL AND TRIM(p_search_term) <> '' THEN
        _where_clauses := array_append(_where_clauses,
            format('(mk.name_bn ILIKE %1$L OR mk.markaz_code::TEXT ILIKE %1$L)', '%' || TRIM(p_search_term) || '%')
        );
    END IF;

    _count_query := '
        SELECT COUNT(mk.id)
        FROM public.markazes mk
        WHERE ' || array_to_string(_where_clauses, ' AND ');

    EXECUTE _count_query INTO _total_items;

    _query := '
        SELECT jsonb_agg(jsonb_build_object(''value'', id, ''label'', name_bn || '' (কোড: '' || markaz_code::TEXT || '')'', ''code'', markaz_code))
        FROM (
            SELECT mk.id, mk.name_bn, mk.markaz_code
            FROM public.markazes mk
            WHERE ' || array_to_string(_where_clauses, ' AND ') || '
            ORDER BY mk.name_bn
            LIMIT ' || p_limit || ' OFFSET ' || _offset || '
        ) AS subquery';

    EXECUTE _query INTO _items;
    RETURN jsonb_build_object('items', COALESCE(_items, '[]'::jsonb), 'total_items', _total_items);
END;
$$;

GRANT EXECUTE ON FUNCTION public.get_markazes_for_filter_dropdown(TEXT, INTEGER, INTEGER) TO authenticated;
